1)  Install Docker and Docker Compose
---
- name: Install Docker and Docker Compose
  hosts: all
  become: yes

  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        filename: docker

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Download Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Verify Docker Compose installation
      command: docker-compose --version
      register: compose_version

    - name: Show Docker Compose version
      debug:
        msg: "Docker Compose version: {{ compose_version.stdout }}"




Install NGINX, Git, PHP dependencies----playbook
---
- name: Install NGINX, Git, and PHP dependencies
  hosts: all
  become: yes

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install NGINX
      apt:
        name: nginx
        state: present

    - name: Install Git
      apt:
        name: git
        state: present

    - name: Install PHP and common extensions
      apt:
        name:
          - php
          - php-cli
          - php-fpm
          - php-mysql
          - php-mbstring
          - php-xml
          - php-curl
          - php-zip
          - php-gd
        state: present

    - name: Ensure NGINX is enabled and running
      systemd:
        name: nginx
        enabled: yes
        state: started


Dockerswarm
---
- name: Initialize Docker Swarm
  hosts: all
  become: yes

  tasks:
    - name: Check if Docker Swarm is already initialized
      shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_status
      changed_when: false
      failed_when: false

    - name: Initialize Docker Swarm if not already initialized
      shell: docker swarm init
      when: swarm_status.stdout != "active"
      register: swarm_init
      changed_when: "'Swarm initialized' in swarm_init.stdout or 'This node is already part of a swarm' in swarm_init.stderr"

Configure NGINx
---
- name: Configure NGINX as a reverse proxy for Yii2 app
  hosts: all
  become: yes

  tasks:
    - name: Install NGINX
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Create NGINX reverse proxy config for Yii2
      copy:
        dest: /etc/nginx/sites-available/yii2
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }

    - name: Enable Yii2 NGINX site
      file:
        src: /etc/nginx/sites-available/yii2
        dest: /etc/nginx/sites-enabled/yii2
        state: link
        force: yes

    - name: Remove default NGINX site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test NGINX configuration
      command: nginx -t
      register: nginx_test
      failed_when: "'successful' not in nginx_test.stdout"

    - name: Restart NGINX
      systemd:
        name: nginx
        state: restarted

